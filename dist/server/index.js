"use strict";

var _fastify = _interopRequireDefault(require("fastify"));

var _rollbar = _interopRequireDefault(require("rollbar"));

var _path = _interopRequireDefault(require("path"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _pug = _interopRequireDefault(require("pug"));

var _fastifyStatic = _interopRequireDefault(require("fastify-static"));

var _pointOfView = _interopRequireDefault(require("point-of-view"));

var _index = _interopRequireDefault(require("./routes/index.js"));

var _webpackConfig = _interopRequireDefault(require("../webpack.config.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_dotenv.default.config();

const app = new _fastify.default({
  logger: true
});
const rollbar = new _rollbar.default({
  accessToken: process.env.POST_SERVER_ITEM_ACCESS_TOKEN,
  captureUncaught: true,
  captureUnhandledRejections: true
}); //  app.use(rollbar.errorHandler());

rollbar.log('Hello world!');
app.register(_index.default);

const setUpViews = app => {
  app.register(_pointOfView.default, {
    engine: {
      pug: _pug.default
    },
    includeViewExtension: true,
    defaultContext: {
      assetPath: filename => `/assets/${filename}`
    }
  });
};

setUpViews(app);
app.register(_fastifyStatic.default, {
  root: _path.default.join(__dirname, '..', 'public'),
  prefix: '/assets/'
});
app.listen(process.env.PORT || 3000, '0.0.0.0', (err, address) => {
  if (err) {
    app.log.error(err);
    process.exit(1);
  }

  app.log.info(`server listening on ${address}`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJkb3RlbnYiLCJjb25maWciLCJhcHAiLCJGYXN0aWZ5IiwibG9nZ2VyIiwicm9sbGJhciIsIlJvbGxiYXIiLCJhY2Nlc3NUb2tlbiIsInByb2Nlc3MiLCJlbnYiLCJQT1NUX1NFUlZFUl9JVEVNX0FDQ0VTU19UT0tFTiIsImNhcHR1cmVVbmNhdWdodCIsImNhcHR1cmVVbmhhbmRsZWRSZWplY3Rpb25zIiwibG9nIiwicmVnaXN0ZXIiLCJyb3V0ZXMiLCJzZXRVcFZpZXdzIiwicG9pbnRPZlZpZXciLCJlbmdpbmUiLCJwdWciLCJQdWciLCJpbmNsdWRlVmlld0V4dGVuc2lvbiIsImRlZmF1bHRDb250ZXh0IiwiYXNzZXRQYXRoIiwiZmlsZW5hbWUiLCJmYXN0aWZ5U3RhdGljIiwicm9vdCIsInBhdGgiLCJqb2luIiwiX19kaXJuYW1lIiwicHJlZml4IiwibGlzdGVuIiwiUE9SVCIsImVyciIsImFkZHJlc3MiLCJlcnJvciIsImV4aXQiLCJpbmZvIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLGdCQUFPQyxNQUFQOztBQUVBLE1BQU1DLEdBQUcsR0FBRyxJQUFJQyxnQkFBSixDQUFZO0FBQ3RCQyxFQUFBQSxNQUFNLEVBQUU7QUFEYyxDQUFaLENBQVo7QUFJQSxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsZ0JBQUosQ0FBWTtBQUMxQkMsRUFBQUEsV0FBVyxFQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsNkJBREM7QUFFMUJDLEVBQUFBLGVBQWUsRUFBRSxJQUZTO0FBRzFCQyxFQUFBQSwwQkFBMEIsRUFBRTtBQUhGLENBQVosQ0FBaEIsQyxDQU1BOztBQUVBUCxPQUFPLENBQUNRLEdBQVIsQ0FBWSxjQUFaO0FBRUFYLEdBQUcsQ0FBQ1ksUUFBSixDQUFhQyxjQUFiOztBQUVBLE1BQU1DLFVBQVUsR0FBSWQsR0FBRCxJQUFTO0FBQzFCQSxFQUFBQSxHQUFHLENBQUNZLFFBQUosQ0FBYUcsb0JBQWIsRUFBMEI7QUFDeEJDLElBQUFBLE1BQU0sRUFBRTtBQUNOQyxNQUFBQSxHQUFHLEVBQUVDO0FBREMsS0FEZ0I7QUFJeEJDLElBQUFBLG9CQUFvQixFQUFFLElBSkU7QUFLeEJDLElBQUFBLGNBQWMsRUFBRTtBQUNkQyxNQUFBQSxTQUFTLEVBQUdDLFFBQUQsSUFBZSxXQUFVQSxRQUFTO0FBRC9CO0FBTFEsR0FBMUI7QUFTRCxDQVZEOztBQVlBUixVQUFVLENBQUNkLEdBQUQsQ0FBVjtBQUVBQSxHQUFHLENBQUNZLFFBQUosQ0FBYVcsc0JBQWIsRUFBNEI7QUFDMUJDLEVBQUFBLElBQUksRUFBRUMsY0FBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLElBQXJCLEVBQTJCLFFBQTNCLENBRG9CO0FBRTFCQyxFQUFBQSxNQUFNLEVBQUU7QUFGa0IsQ0FBNUI7QUFLQTVCLEdBQUcsQ0FBQzZCLE1BQUosQ0FBV3ZCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZdUIsSUFBWixJQUFvQixJQUEvQixFQUFxQyxTQUFyQyxFQUFnRCxDQUFDQyxHQUFELEVBQU1DLE9BQU4sS0FBa0I7QUFDaEUsTUFBSUQsR0FBSixFQUFTO0FBQ1AvQixJQUFBQSxHQUFHLENBQUNXLEdBQUosQ0FBUXNCLEtBQVIsQ0FBY0YsR0FBZDtBQUNBekIsSUFBQUEsT0FBTyxDQUFDNEIsSUFBUixDQUFhLENBQWI7QUFDRDs7QUFDRGxDLEVBQUFBLEdBQUcsQ0FBQ1csR0FBSixDQUFRd0IsSUFBUixDQUFjLHVCQUFzQkgsT0FBUSxFQUE1QztBQUNELENBTkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRmFzdGlmeSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCBSb2xsYmFyIGZyb20gJ3JvbGxiYXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5pbXBvcnQgUHVnIGZyb20gJ3B1Zyc7XG5pbXBvcnQgZmFzdGlmeVN0YXRpYyBmcm9tICdmYXN0aWZ5LXN0YXRpYyc7XG5pbXBvcnQgcG9pbnRPZlZpZXcgZnJvbSAncG9pbnQtb2Ytdmlldyc7XG5pbXBvcnQgcm91dGVzIGZyb20gJy4vcm91dGVzL2luZGV4LmpzJztcbmltcG9ydCB3ZWJwYWNrQ29uZmlnIGZyb20gJy4uL3dlYnBhY2suY29uZmlnLmpzJztcblxuZG90ZW52LmNvbmZpZygpO1xuXG5jb25zdCBhcHAgPSBuZXcgRmFzdGlmeSh7XG4gIGxvZ2dlcjogdHJ1ZSxcbn0pO1xuXG5jb25zdCByb2xsYmFyID0gbmV3IFJvbGxiYXIoe1xuICBhY2Nlc3NUb2tlbjogcHJvY2Vzcy5lbnYuUE9TVF9TRVJWRVJfSVRFTV9BQ0NFU1NfVE9LRU4sXG4gIGNhcHR1cmVVbmNhdWdodDogdHJ1ZSxcbiAgY2FwdHVyZVVuaGFuZGxlZFJlamVjdGlvbnM6IHRydWUsXG59KTtcblxuLy8gIGFwcC51c2Uocm9sbGJhci5lcnJvckhhbmRsZXIoKSk7XG5cbnJvbGxiYXIubG9nKCdIZWxsbyB3b3JsZCEnKTtcblxuYXBwLnJlZ2lzdGVyKHJvdXRlcyk7XG5cbmNvbnN0IHNldFVwVmlld3MgPSAoYXBwKSA9PiB7XG4gIGFwcC5yZWdpc3Rlcihwb2ludE9mVmlldywge1xuICAgIGVuZ2luZToge1xuICAgICAgcHVnOiBQdWcsXG4gICAgfSxcbiAgICBpbmNsdWRlVmlld0V4dGVuc2lvbjogdHJ1ZSxcbiAgICBkZWZhdWx0Q29udGV4dDoge1xuICAgICAgYXNzZXRQYXRoOiAoZmlsZW5hbWUpID0+IGAvYXNzZXRzLyR7ZmlsZW5hbWV9YCxcbiAgICB9LFxuICB9KTtcbn07XG5cbnNldFVwVmlld3MoYXBwKTtcblxuYXBwLnJlZ2lzdGVyKGZhc3RpZnlTdGF0aWMsIHtcbiAgcm9vdDogcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJ3B1YmxpYycpLFxuICBwcmVmaXg6ICcvYXNzZXRzLycsXG59KTtcblxuYXBwLmxpc3Rlbihwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDAsICcwLjAuMC4wJywgKGVyciwgYWRkcmVzcykgPT4ge1xuICBpZiAoZXJyKSB7XG4gICAgYXBwLmxvZy5lcnJvcihlcnIpO1xuICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgfVxuICBhcHAubG9nLmluZm8oYHNlcnZlciBsaXN0ZW5pbmcgb24gJHthZGRyZXNzfWApO1xufSk7XG4iXX0=
"use strict";

var _fastify = _interopRequireDefault(require("fastify"));

var _rollbar = _interopRequireDefault(require("rollbar"));

var _path = _interopRequireDefault(require("path"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _pug = _interopRequireDefault(require("pug"));

var _fastifyStatic = _interopRequireDefault(require("fastify-static"));

var _fastifyFormbody = _interopRequireDefault(require("fastify-formbody"));

var _fastifyObjectionjs = _interopRequireDefault(require("fastify-objectionjs"));

var _fastifyFlash = _interopRequireDefault(require("fastify-flash"));

var _fastifyErrorPage = _interopRequireDefault(require("fastify-error-page"));

var _fastifySecureSession = _interopRequireDefault(require("fastify-secure-session"));

var _fastifyMethodOverride = _interopRequireDefault(require("fastify-method-override"));

var _pointOfView = _interopRequireDefault(require("point-of-view"));

var _models = _interopRequireDefault(require("./models"));

var _knexfile = _interopRequireDefault(require("../knexfile.js"));

var _index = _interopRequireDefault(require("./routes/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_dotenv.default.config();

const rollbar = new _rollbar.default({
  accessToken: process.env.POST_SERVER_ITEM_ACCESS_TOKEN,
  captureUncaught: true,
  captureUnhandledRejections: true
}); //  app.use(rollbar.errorHandler());

const privateRoutes = ['/labels', '/tasks', '/statuses', '/labels/new', '/statuses/new'];
rollbar.log('Hello world!');

const setUpViews = app => {
  app.register(_pointOfView.default, {
    engine: {
      pug: _pug.default
    },
    includeViewExtension: true,
    defaultContext: {
      assetPath: filename => `/assets/${filename}`
    }
  });
  app.decorateReply('render', function render(viewPath, locals) {
    this.view(viewPath, { ...locals,
      reply: this
    });
  });
};

const setUpAssets = app => {
  app.register(_fastifyStatic.default, {
    root: _path.default.join(__dirname, '..', 'public'),
    prefix: '/assets/'
  });
};

const addHooks = app => {
  app.decorateRequest('currentUser', null);
  app.decorateRequest('signedIn', false);
  app.addHook('preHandler', async (req, reply) => {
    const userId = req.session.get('userId');

    if (userId) {
      req.currentUser = await app.objection.models.user.query().findById(userId);
      req.signedIn = true;
    }

    if (privateRoutes.find(r => r === req.url) && !userId) {
      req.flash('danger', 'Нет доступа! Авторизуйтесь');
      reply.redirect('/');
    }
  });
};

const app = new _fastify.default({
  logger: true
});

const registerPlugins = app => {
  app.register(_fastifyErrorPage.default);
  app.register(_fastifyFormbody.default);
  setUpViews(app);
  setUpAssets(app);
  app.register(_fastifyObjectionjs.default, {
    knexConfig: _knexfile.default.development,
    models: _models.default
  });
  app.register(_fastifySecureSession.default, {
    secret: 'qwertyuiopasdfghjklzxcnmmmzxasjhdklasjkdlawqi',
    cookie: {
      path: '/'
    }
  });
  app.register(_fastifyMethodOverride.default);
  app.register(_fastifyFlash.default);
  (0, _index.default)(app);
  addHooks(app);
};

registerPlugins(app);
app.listen(process.env.PORT || 3000, '0.0.0.0', (err, address) => {
  if (err) {
    app.log.error(err);
    process.exit(1);
  }

  app.log.info(`server listening on ${address}`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
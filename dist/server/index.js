"use strict";

var _fastify = _interopRequireDefault(require("fastify"));

var _rollbar = _interopRequireDefault(require("rollbar"));

var _path = _interopRequireDefault(require("path"));

var _dotenv = _interopRequireDefault(require("dotenv"));

var _pug = _interopRequireDefault(require("pug"));

var _fastifyStatic = _interopRequireDefault(require("fastify-static"));

var _fastifyFormbody = _interopRequireDefault(require("fastify-formbody"));

var _fastifyObjectionjs = _interopRequireDefault(require("fastify-objectionjs"));

var _fastifyFlash = _interopRequireDefault(require("fastify-flash"));

var _fastifyErrorPage = _interopRequireDefault(require("fastify-error-page"));

var _fastifySecureSession = _interopRequireDefault(require("fastify-secure-session"));

var _fastifyMethodOverride = _interopRequireDefault(require("fastify-method-override"));

var _pointOfView = _interopRequireDefault(require("point-of-view"));

var _i18next = _interopRequireDefault(require("i18next"));

var _models = _interopRequireDefault(require("./models"));

var _ru = _interopRequireDefault(require("./locales/ru.js"));

var _knexfile = _interopRequireDefault(require("../knexfile.js"));

var _index = _interopRequireDefault(require("./routes/index.js"));

var _index2 = _interopRequireDefault(require("./helpers/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_dotenv.default.config();

const rollbar = new _rollbar.default({
  accessToken: process.env.POST_SERVER_ITEM_ACCESS_TOKEN,
  captureUncaught: true,
  captureUnhandledRejections: true
}); //  app.use(rollbar.errorHandler());

const privateRoutes = ['/tags', '/tasks', '/tags', '/labels/new', '/statuses/new'];
rollbar.log('Hello world!');

const setUpViews = app => {
  const helpers = (0, _index2.default)(app);
  app.register(_pointOfView.default, {
    engine: {
      pug: _pug.default
    },
    includeViewExtension: true,
    defaultContext: { ...helpers,
      assetPath: filename => `/assets/${filename}`
    },
    templates: _path.default.join(__dirname, '..', 'server', 'views')
  });
  app.decorateReply('render', function render(viewPath, locals) {
    this.view(viewPath, { ...locals,
      reply: this
    });
  });
};

const setupLocalization = () => {
  _i18next.default.init({
    lng: 'ru',
    fallbackLng: 'en',
    debug: false,
    resources: {
      ru: _ru.default
    }
  });
};

const setUpAssets = app => {
  app.register(_fastifyStatic.default, {
    root: _path.default.join(__dirname, '..', 'public'),
    prefix: '/assets/'
  });
};

const addHooks = app => {
  app.decorateRequest('currentUser', null);
  app.decorateRequest('signedIn', false);
  app.addHook('preHandler', async (req, reply) => {
    const userId = req.session.get('userId');

    if (userId) {
      req.currentUser = await app.objection.models.user.query().findById(userId);
      req.signedIn = true;
    }

    if (privateRoutes.find(r => r === req.url) && !userId) {
      req.flash('danger', 'Нет доступа! Авторизуйтесь');
      reply.redirect('/');
    }
  });
};

const app = new _fastify.default({
  logger: true
});

const registerPlugins = app => {
  app.register(_fastifyErrorPage.default);
  app.register(_fastifyFormbody.default);
  setUpViews(app);
  setUpAssets(app);
  app.register(_fastifyObjectionjs.default, {
    knexConfig: _knexfile.default.development,
    models: _models.default
  });
  app.register(_fastifySecureSession.default, {
    secret: 'qwertyuiopasdfghjklzxcnmmmzxasjhdklasjkdlawqi',
    cookie: {
      path: '/'
    }
  });
  app.register(_fastifyMethodOverride.default);
  app.register(_fastifyFlash.default);
  (0, _index.default)(app);
  addHooks(app);
};

registerPlugins(app);
setupLocalization();
app.listen(process.env.PORT || 3000, '0.0.0.0', (err, address) => {
  if (err) {
    app.log.error(err);
    process.exit(1);
  }

  app.log.info(`server listening on ${address}`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJkb3RlbnYiLCJjb25maWciLCJyb2xsYmFyIiwiUm9sbGJhciIsImFjY2Vzc1Rva2VuIiwicHJvY2VzcyIsImVudiIsIlBPU1RfU0VSVkVSX0lURU1fQUNDRVNTX1RPS0VOIiwiY2FwdHVyZVVuY2F1Z2h0IiwiY2FwdHVyZVVuaGFuZGxlZFJlamVjdGlvbnMiLCJwcml2YXRlUm91dGVzIiwibG9nIiwic2V0VXBWaWV3cyIsImFwcCIsImhlbHBlcnMiLCJyZWdpc3RlciIsInBvaW50T2ZWaWV3IiwiZW5naW5lIiwicHVnIiwiUHVnIiwiaW5jbHVkZVZpZXdFeHRlbnNpb24iLCJkZWZhdWx0Q29udGV4dCIsImFzc2V0UGF0aCIsImZpbGVuYW1lIiwidGVtcGxhdGVzIiwicGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJkZWNvcmF0ZVJlcGx5IiwicmVuZGVyIiwidmlld1BhdGgiLCJsb2NhbHMiLCJ2aWV3IiwicmVwbHkiLCJzZXR1cExvY2FsaXphdGlvbiIsImkxOG5leHQiLCJpbml0IiwibG5nIiwiZmFsbGJhY2tMbmciLCJkZWJ1ZyIsInJlc291cmNlcyIsInJ1Iiwic2V0VXBBc3NldHMiLCJmYXN0aWZ5U3RhdGljIiwicm9vdCIsInByZWZpeCIsImFkZEhvb2tzIiwiZGVjb3JhdGVSZXF1ZXN0IiwiYWRkSG9vayIsInJlcSIsInVzZXJJZCIsInNlc3Npb24iLCJnZXQiLCJjdXJyZW50VXNlciIsIm9iamVjdGlvbiIsIm1vZGVscyIsInVzZXIiLCJxdWVyeSIsImZpbmRCeUlkIiwic2lnbmVkSW4iLCJmaW5kIiwiciIsInVybCIsImZsYXNoIiwicmVkaXJlY3QiLCJGYXN0aWZ5IiwibG9nZ2VyIiwicmVnaXN0ZXJQbHVnaW5zIiwiZmFzdGlmeUVycm9yUGFnZSIsImZhc3RpZnlGb3JtYm9keSIsImZhc3RpZnlPYmplY3Rpb24iLCJrbmV4Q29uZmlnIiwiZGV2ZWxvcG1lbnQiLCJmYXN0aWZ5U2VjdXJlU2Vzc2lvbiIsInNlY3JldCIsImNvb2tpZSIsImZhc3RpZnlNZXRob2RPdmVycmlkZSIsImZhc3RpZnlGbGFzaCIsImxpc3RlbiIsIlBPUlQiLCJlcnIiLCJhZGRyZXNzIiwiZXJyb3IiLCJleGl0IiwiaW5mbyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7OztBQUVBQSxnQkFBT0MsTUFBUDs7QUFFQSxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsZ0JBQUosQ0FBWTtBQUMxQkMsRUFBQUEsV0FBVyxFQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsNkJBREM7QUFFMUJDLEVBQUFBLGVBQWUsRUFBRSxJQUZTO0FBRzFCQyxFQUFBQSwwQkFBMEIsRUFBRTtBQUhGLENBQVosQ0FBaEIsQyxDQU1BOztBQUNBLE1BQU1DLGFBQWEsR0FBRyxDQUFDLE9BQUQsRUFBVSxRQUFWLEVBQW9CLE9BQXBCLEVBQTZCLGFBQTdCLEVBQTRDLGVBQTVDLENBQXRCO0FBRUFSLE9BQU8sQ0FBQ1MsR0FBUixDQUFZLGNBQVo7O0FBRUEsTUFBTUMsVUFBVSxHQUFJQyxHQUFELElBQVM7QUFDMUIsUUFBTUMsT0FBTyxHQUFHLHFCQUFXRCxHQUFYLENBQWhCO0FBQ0FBLEVBQUFBLEdBQUcsQ0FBQ0UsUUFBSixDQUFhQyxvQkFBYixFQUEwQjtBQUN4QkMsSUFBQUEsTUFBTSxFQUFFO0FBQ05DLE1BQUFBLEdBQUcsRUFBRUM7QUFEQyxLQURnQjtBQUl4QkMsSUFBQUEsb0JBQW9CLEVBQUUsSUFKRTtBQUt4QkMsSUFBQUEsY0FBYyxFQUFFLEVBQ2QsR0FBR1AsT0FEVztBQUVkUSxNQUFBQSxTQUFTLEVBQUdDLFFBQUQsSUFBZSxXQUFVQSxRQUFTO0FBRi9CLEtBTFE7QUFTeEJDLElBQUFBLFNBQVMsRUFBRUMsY0FBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLElBQXJCLEVBQTJCLFFBQTNCLEVBQXFDLE9BQXJDO0FBVGEsR0FBMUI7QUFXQWQsRUFBQUEsR0FBRyxDQUFDZSxhQUFKLENBQWtCLFFBQWxCLEVBQTRCLFNBQVNDLE1BQVQsQ0FBZ0JDLFFBQWhCLEVBQTBCQyxNQUExQixFQUFrQztBQUM1RCxTQUFLQyxJQUFMLENBQVVGLFFBQVYsRUFBb0IsRUFBRSxHQUFHQyxNQUFMO0FBQWFFLE1BQUFBLEtBQUssRUFBRTtBQUFwQixLQUFwQjtBQUNELEdBRkQ7QUFHRCxDQWhCRDs7QUFrQkEsTUFBTUMsaUJBQWlCLEdBQUcsTUFBTTtBQUM5QkMsbUJBQ0dDLElBREgsQ0FDUTtBQUNKQyxJQUFBQSxHQUFHLEVBQUUsSUFERDtBQUVKQyxJQUFBQSxXQUFXLEVBQUUsSUFGVDtBQUdKQyxJQUFBQSxLQUFLLEVBQUUsS0FISDtBQUlKQyxJQUFBQSxTQUFTLEVBQUU7QUFDVEMsTUFBQUEsRUFBRSxFQUFGQTtBQURTO0FBSlAsR0FEUjtBQVNELENBVkQ7O0FBWUEsTUFBTUMsV0FBVyxHQUFJN0IsR0FBRCxJQUFTO0FBQzNCQSxFQUFBQSxHQUFHLENBQUNFLFFBQUosQ0FBYTRCLHNCQUFiLEVBQTRCO0FBQzFCQyxJQUFBQSxJQUFJLEVBQUVuQixjQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsSUFBckIsRUFBMkIsUUFBM0IsQ0FEb0I7QUFFMUJrQixJQUFBQSxNQUFNLEVBQUU7QUFGa0IsR0FBNUI7QUFJRCxDQUxEOztBQU9BLE1BQU1DLFFBQVEsR0FBSWpDLEdBQUQsSUFBUztBQUN4QkEsRUFBQUEsR0FBRyxDQUFDa0MsZUFBSixDQUFvQixhQUFwQixFQUFtQyxJQUFuQztBQUNBbEMsRUFBQUEsR0FBRyxDQUFDa0MsZUFBSixDQUFvQixVQUFwQixFQUFnQyxLQUFoQztBQUVBbEMsRUFBQUEsR0FBRyxDQUFDbUMsT0FBSixDQUFZLFlBQVosRUFBMEIsT0FBT0MsR0FBUCxFQUFZaEIsS0FBWixLQUFzQjtBQUM5QyxVQUFNaUIsTUFBTSxHQUFHRCxHQUFHLENBQUNFLE9BQUosQ0FBWUMsR0FBWixDQUFnQixRQUFoQixDQUFmOztBQUNBLFFBQUlGLE1BQUosRUFBWTtBQUNWRCxNQUFBQSxHQUFHLENBQUNJLFdBQUosR0FBa0IsTUFBTXhDLEdBQUcsQ0FBQ3lDLFNBQUosQ0FBY0MsTUFBZCxDQUFxQkMsSUFBckIsQ0FBMEJDLEtBQTFCLEdBQWtDQyxRQUFsQyxDQUEyQ1IsTUFBM0MsQ0FBeEI7QUFDQUQsTUFBQUEsR0FBRyxDQUFDVSxRQUFKLEdBQWUsSUFBZjtBQUNEOztBQUNELFFBQUlqRCxhQUFhLENBQUNrRCxJQUFkLENBQW9CQyxDQUFELElBQU9BLENBQUMsS0FBS1osR0FBRyxDQUFDYSxHQUFwQyxLQUE0QyxDQUFDWixNQUFqRCxFQUF5RDtBQUN2REQsTUFBQUEsR0FBRyxDQUFDYyxLQUFKLENBQVUsUUFBVixFQUFvQiw0QkFBcEI7QUFDQTlCLE1BQUFBLEtBQUssQ0FBQytCLFFBQU4sQ0FBZSxHQUFmO0FBQ0Q7QUFDRixHQVZEO0FBV0QsQ0FmRDs7QUFpQkEsTUFBTW5ELEdBQUcsR0FBRyxJQUFJb0QsZ0JBQUosQ0FBWTtBQUN0QkMsRUFBQUEsTUFBTSxFQUFFO0FBRGMsQ0FBWixDQUFaOztBQUlBLE1BQU1DLGVBQWUsR0FBSXRELEdBQUQsSUFBUztBQUMvQkEsRUFBQUEsR0FBRyxDQUFDRSxRQUFKLENBQWFxRCx5QkFBYjtBQUNBdkQsRUFBQUEsR0FBRyxDQUFDRSxRQUFKLENBQWFzRCx3QkFBYjtBQUNBekQsRUFBQUEsVUFBVSxDQUFDQyxHQUFELENBQVY7QUFDQTZCLEVBQUFBLFdBQVcsQ0FBQzdCLEdBQUQsQ0FBWDtBQUNBQSxFQUFBQSxHQUFHLENBQUNFLFFBQUosQ0FBYXVELDJCQUFiLEVBQStCO0FBQzdCQyxJQUFBQSxVQUFVLEVBQUVBLGtCQUFXQyxXQURNO0FBRTdCakIsSUFBQUEsTUFBTSxFQUFOQTtBQUY2QixHQUEvQjtBQUlBMUMsRUFBQUEsR0FBRyxDQUFDRSxRQUFKLENBQWEwRCw2QkFBYixFQUFtQztBQUNqQ0MsSUFBQUEsTUFBTSxFQUFFLCtDQUR5QjtBQUVqQ0MsSUFBQUEsTUFBTSxFQUFFO0FBQ05sRCxNQUFBQSxJQUFJLEVBQUU7QUFEQTtBQUZ5QixHQUFuQztBQU1BWixFQUFBQSxHQUFHLENBQUNFLFFBQUosQ0FBYTZELDhCQUFiO0FBQ0EvRCxFQUFBQSxHQUFHLENBQUNFLFFBQUosQ0FBYThELHFCQUFiO0FBQ0Esc0JBQU9oRSxHQUFQO0FBQ0FpQyxFQUFBQSxRQUFRLENBQUNqQyxHQUFELENBQVI7QUFDRCxDQW5CRDs7QUFxQkFzRCxlQUFlLENBQUN0RCxHQUFELENBQWY7QUFDQXFCLGlCQUFpQjtBQUVqQnJCLEdBQUcsQ0FBQ2lFLE1BQUosQ0FBV3pFLE9BQU8sQ0FBQ0MsR0FBUixDQUFZeUUsSUFBWixJQUFvQixJQUEvQixFQUFxQyxTQUFyQyxFQUFnRCxDQUFDQyxHQUFELEVBQU1DLE9BQU4sS0FBa0I7QUFDaEUsTUFBSUQsR0FBSixFQUFTO0FBQ1BuRSxJQUFBQSxHQUFHLENBQUNGLEdBQUosQ0FBUXVFLEtBQVIsQ0FBY0YsR0FBZDtBQUNBM0UsSUFBQUEsT0FBTyxDQUFDOEUsSUFBUixDQUFhLENBQWI7QUFDRDs7QUFDRHRFLEVBQUFBLEdBQUcsQ0FBQ0YsR0FBSixDQUFReUUsSUFBUixDQUFjLHVCQUFzQkgsT0FBUSxFQUE1QztBQUNELENBTkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRmFzdGlmeSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCBSb2xsYmFyIGZyb20gJ3JvbGxiYXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XG5pbXBvcnQgUHVnIGZyb20gJ3B1Zyc7XG5pbXBvcnQgZmFzdGlmeVN0YXRpYyBmcm9tICdmYXN0aWZ5LXN0YXRpYyc7XG5pbXBvcnQgZmFzdGlmeUZvcm1ib2R5IGZyb20gJ2Zhc3RpZnktZm9ybWJvZHknO1xuaW1wb3J0IGZhc3RpZnlPYmplY3Rpb24gZnJvbSAnZmFzdGlmeS1vYmplY3Rpb25qcyc7XG5pbXBvcnQgZmFzdGlmeUZsYXNoIGZyb20gJ2Zhc3RpZnktZmxhc2gnO1xuaW1wb3J0IGZhc3RpZnlFcnJvclBhZ2UgZnJvbSAnZmFzdGlmeS1lcnJvci1wYWdlJztcbmltcG9ydCBmYXN0aWZ5U2VjdXJlU2Vzc2lvbiBmcm9tICdmYXN0aWZ5LXNlY3VyZS1zZXNzaW9uJztcbmltcG9ydCBmYXN0aWZ5TWV0aG9kT3ZlcnJpZGUgZnJvbSAnZmFzdGlmeS1tZXRob2Qtb3ZlcnJpZGUnO1xuaW1wb3J0IHBvaW50T2ZWaWV3IGZyb20gJ3BvaW50LW9mLXZpZXcnO1xuaW1wb3J0IGkxOG5leHQgZnJvbSAnaTE4bmV4dCc7XG5pbXBvcnQgbW9kZWxzIGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCBydSBmcm9tICcuL2xvY2FsZXMvcnUuanMnO1xuXG5pbXBvcnQga25leENvbmZpZyBmcm9tICcuLi9rbmV4ZmlsZS5qcyc7XG5pbXBvcnQgcm91dGVzIGZyb20gJy4vcm91dGVzL2luZGV4LmpzJztcbmltcG9ydCBnZXRIZWxwZXJzIGZyb20gJy4vaGVscGVycy9pbmRleC5qcyc7XG5cbmRvdGVudi5jb25maWcoKTtcblxuY29uc3Qgcm9sbGJhciA9IG5ldyBSb2xsYmFyKHtcbiAgYWNjZXNzVG9rZW46IHByb2Nlc3MuZW52LlBPU1RfU0VSVkVSX0lURU1fQUNDRVNTX1RPS0VOLFxuICBjYXB0dXJlVW5jYXVnaHQ6IHRydWUsXG4gIGNhcHR1cmVVbmhhbmRsZWRSZWplY3Rpb25zOiB0cnVlLFxufSk7XG5cbi8vICBhcHAudXNlKHJvbGxiYXIuZXJyb3JIYW5kbGVyKCkpO1xuY29uc3QgcHJpdmF0ZVJvdXRlcyA9IFsnL3RhZ3MnLCAnL3Rhc2tzJywgJy90YWdzJywgJy9sYWJlbHMvbmV3JywgJy9zdGF0dXNlcy9uZXcnXTtcblxucm9sbGJhci5sb2coJ0hlbGxvIHdvcmxkIScpO1xuXG5jb25zdCBzZXRVcFZpZXdzID0gKGFwcCkgPT4ge1xuICBjb25zdCBoZWxwZXJzID0gZ2V0SGVscGVycyhhcHApO1xuICBhcHAucmVnaXN0ZXIocG9pbnRPZlZpZXcsIHtcbiAgICBlbmdpbmU6IHtcbiAgICAgIHB1ZzogUHVnLFxuICAgIH0sXG4gICAgaW5jbHVkZVZpZXdFeHRlbnNpb246IHRydWUsXG4gICAgZGVmYXVsdENvbnRleHQ6IHtcbiAgICAgIC4uLmhlbHBlcnMsXG4gICAgICBhc3NldFBhdGg6IChmaWxlbmFtZSkgPT4gYC9hc3NldHMvJHtmaWxlbmFtZX1gLFxuICAgIH0sXG4gICAgdGVtcGxhdGVzOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnc2VydmVyJywgJ3ZpZXdzJyksXG4gIH0pO1xuICBhcHAuZGVjb3JhdGVSZXBseSgncmVuZGVyJywgZnVuY3Rpb24gcmVuZGVyKHZpZXdQYXRoLCBsb2NhbHMpIHtcbiAgICB0aGlzLnZpZXcodmlld1BhdGgsIHsgLi4ubG9jYWxzLCByZXBseTogdGhpcyB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBzZXR1cExvY2FsaXphdGlvbiA9ICgpID0+IHtcbiAgaTE4bmV4dFxuICAgIC5pbml0KHtcbiAgICAgIGxuZzogJ3J1JyxcbiAgICAgIGZhbGxiYWNrTG5nOiAnZW4nLFxuICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgcmVzb3VyY2VzOiB7XG4gICAgICAgIHJ1LFxuICAgICAgfSxcbiAgICB9KTtcbn07XG5cbmNvbnN0IHNldFVwQXNzZXRzID0gKGFwcCkgPT4ge1xuICBhcHAucmVnaXN0ZXIoZmFzdGlmeVN0YXRpYywge1xuICAgIHJvb3Q6IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICdwdWJsaWMnKSxcbiAgICBwcmVmaXg6ICcvYXNzZXRzLycsXG4gIH0pO1xufTtcblxuY29uc3QgYWRkSG9va3MgPSAoYXBwKSA9PiB7XG4gIGFwcC5kZWNvcmF0ZVJlcXVlc3QoJ2N1cnJlbnRVc2VyJywgbnVsbCk7XG4gIGFwcC5kZWNvcmF0ZVJlcXVlc3QoJ3NpZ25lZEluJywgZmFsc2UpO1xuXG4gIGFwcC5hZGRIb29rKCdwcmVIYW5kbGVyJywgYXN5bmMgKHJlcSwgcmVwbHkpID0+IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEuc2Vzc2lvbi5nZXQoJ3VzZXJJZCcpO1xuICAgIGlmICh1c2VySWQpIHtcbiAgICAgIHJlcS5jdXJyZW50VXNlciA9IGF3YWl0IGFwcC5vYmplY3Rpb24ubW9kZWxzLnVzZXIucXVlcnkoKS5maW5kQnlJZCh1c2VySWQpO1xuICAgICAgcmVxLnNpZ25lZEluID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHByaXZhdGVSb3V0ZXMuZmluZCgocikgPT4gciA9PT0gcmVxLnVybCkgJiYgIXVzZXJJZCkge1xuICAgICAgcmVxLmZsYXNoKCdkYW5nZXInLCAn0J3QtdGCINC00L7RgdGC0YPQv9CwISDQkNCy0YLQvtGA0LjQt9GD0LnRgtC10YHRjCcpO1xuICAgICAgcmVwbHkucmVkaXJlY3QoJy8nKTtcbiAgICB9XG4gIH0pO1xufTtcblxuY29uc3QgYXBwID0gbmV3IEZhc3RpZnkoe1xuICBsb2dnZXI6IHRydWUsXG59KTtcblxuY29uc3QgcmVnaXN0ZXJQbHVnaW5zID0gKGFwcCkgPT4ge1xuICBhcHAucmVnaXN0ZXIoZmFzdGlmeUVycm9yUGFnZSk7XG4gIGFwcC5yZWdpc3RlcihmYXN0aWZ5Rm9ybWJvZHkpO1xuICBzZXRVcFZpZXdzKGFwcCk7XG4gIHNldFVwQXNzZXRzKGFwcCk7XG4gIGFwcC5yZWdpc3RlcihmYXN0aWZ5T2JqZWN0aW9uLCB7XG4gICAga25leENvbmZpZzoga25leENvbmZpZy5kZXZlbG9wbWVudCxcbiAgICBtb2RlbHMsXG4gIH0pO1xuICBhcHAucmVnaXN0ZXIoZmFzdGlmeVNlY3VyZVNlc3Npb24sIHtcbiAgICBzZWNyZXQ6ICdxd2VydHl1aW9wYXNkZmdoamtsenhjbm1tbXp4YXNqaGRrbGFzamtkbGF3cWknLFxuICAgIGNvb2tpZToge1xuICAgICAgcGF0aDogJy8nLFxuICAgIH0sXG4gIH0pO1xuICBhcHAucmVnaXN0ZXIoZmFzdGlmeU1ldGhvZE92ZXJyaWRlKTtcbiAgYXBwLnJlZ2lzdGVyKGZhc3RpZnlGbGFzaCk7XG4gIHJvdXRlcyhhcHApO1xuICBhZGRIb29rcyhhcHApO1xufTtcblxucmVnaXN0ZXJQbHVnaW5zKGFwcCk7XG5zZXR1cExvY2FsaXphdGlvbigpO1xuXG5hcHAubGlzdGVuKHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMCwgJzAuMC4wLjAnLCAoZXJyLCBhZGRyZXNzKSA9PiB7XG4gIGlmIChlcnIpIHtcbiAgICBhcHAubG9nLmVycm9yKGVycik7XG4gICAgcHJvY2Vzcy5leGl0KDEpO1xuICB9XG4gIGFwcC5sb2cuaW5mbyhgc2VydmVyIGxpc3RlbmluZyBvbiAke2FkZHJlc3N9YCk7XG59KTtcbiJdfQ==